/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiAgentService } from "../aiAgent.service";
import { AiAgentCreateInput } from "./AiAgentCreateInput";
import { AiAgent } from "./AiAgent";
import { AiAgentFindManyArgs } from "./AiAgentFindManyArgs";
import { AiAgentWhereUniqueInput } from "./AiAgentWhereUniqueInput";
import { AiAgentUpdateInput } from "./AiAgentUpdateInput";
import { AiTaskFindManyArgs } from "../../aiTask/base/AiTaskFindManyArgs";
import { AiTask } from "../../aiTask/base/AiTask";
import { AiTaskWhereUniqueInput } from "../../aiTask/base/AiTaskWhereUniqueInput";

export class AiAgentControllerBase {
  constructor(protected readonly service: AiAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiAgent })
  async createAiAgent(
    @common.Body() data: AiAgentCreateInput
  ): Promise<AiAgent> {
    return await this.service.createAiAgent({
      data: data,
      select: {
        configField: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiAgent] })
  @ApiNestedQuery(AiAgentFindManyArgs)
  async aiAgents(@common.Req() request: Request): Promise<AiAgent[]> {
    const args = plainToClass(AiAgentFindManyArgs, request.query);
    return this.service.aiAgents({
      ...args,
      select: {
        configField: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiAgent(
    @common.Param() params: AiAgentWhereUniqueInput
  ): Promise<AiAgent | null> {
    const result = await this.service.aiAgent({
      where: params,
      select: {
        configField: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiAgent(
    @common.Param() params: AiAgentWhereUniqueInput,
    @common.Body() data: AiAgentUpdateInput
  ): Promise<AiAgent | null> {
    try {
      return await this.service.updateAiAgent({
        where: params,
        data: data,
        select: {
          configField: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiAgent(
    @common.Param() params: AiAgentWhereUniqueInput
  ): Promise<AiAgent | null> {
    try {
      return await this.service.deleteAiAgent({
        where: params,
        select: {
          configField: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/aiTasks")
  @ApiNestedQuery(AiTaskFindManyArgs)
  async findAiTasks(
    @common.Req() request: Request,
    @common.Param() params: AiAgentWhereUniqueInput
  ): Promise<AiTask[]> {
    const query = plainToClass(AiTaskFindManyArgs, request.query);
    const results = await this.service.findAiTasks(params.id, {
      ...query,
      select: {
        aiAgent: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        journalEntry: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aiTasks")
  async connectAiTasks(
    @common.Param() params: AiAgentWhereUniqueInput,
    @common.Body() body: AiTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiTasks: {
        connect: body,
      },
    };
    await this.service.updateAiAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aiTasks")
  async updateAiTasks(
    @common.Param() params: AiAgentWhereUniqueInput,
    @common.Body() body: AiTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiTasks: {
        set: body,
      },
    };
    await this.service.updateAiAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aiTasks")
  async disconnectAiTasks(
    @common.Param() params: AiAgentWhereUniqueInput,
    @common.Body() body: AiTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiTasks: {
        disconnect: body,
      },
    };
    await this.service.updateAiAgent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
