/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiAgent } from "./AiAgent";
import { AiAgentCountArgs } from "./AiAgentCountArgs";
import { AiAgentFindManyArgs } from "./AiAgentFindManyArgs";
import { AiAgentFindUniqueArgs } from "./AiAgentFindUniqueArgs";
import { CreateAiAgentArgs } from "./CreateAiAgentArgs";
import { UpdateAiAgentArgs } from "./UpdateAiAgentArgs";
import { DeleteAiAgentArgs } from "./DeleteAiAgentArgs";
import { AiTaskFindManyArgs } from "../../aiTask/base/AiTaskFindManyArgs";
import { AiTask } from "../../aiTask/base/AiTask";
import { AiAgentService } from "../aiAgent.service";
@graphql.Resolver(() => AiAgent)
export class AiAgentResolverBase {
  constructor(protected readonly service: AiAgentService) {}

  async _aiAgentsMeta(
    @graphql.Args() args: AiAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiAgent])
  async aiAgents(
    @graphql.Args() args: AiAgentFindManyArgs
  ): Promise<AiAgent[]> {
    return this.service.aiAgents(args);
  }

  @graphql.Query(() => AiAgent, { nullable: true })
  async aiAgent(
    @graphql.Args() args: AiAgentFindUniqueArgs
  ): Promise<AiAgent | null> {
    const result = await this.service.aiAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiAgent)
  async createAiAgent(
    @graphql.Args() args: CreateAiAgentArgs
  ): Promise<AiAgent> {
    return await this.service.createAiAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AiAgent)
  async updateAiAgent(
    @graphql.Args() args: UpdateAiAgentArgs
  ): Promise<AiAgent | null> {
    try {
      return await this.service.updateAiAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiAgent)
  async deleteAiAgent(
    @graphql.Args() args: DeleteAiAgentArgs
  ): Promise<AiAgent | null> {
    try {
      return await this.service.deleteAiAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AiTask], { name: "aiTasks" })
  async findAiTasks(
    @graphql.Parent() parent: AiAgent,
    @graphql.Args() args: AiTaskFindManyArgs
  ): Promise<AiTask[]> {
    const results = await this.service.findAiTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
