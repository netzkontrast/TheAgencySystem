/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AiTask as PrismaAiTask,
  AiAgent as PrismaAiAgent,
  JournalEntry as PrismaJournalEntry,
} from "@prisma/client";

export class AiTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AiTaskCountArgs, "select">): Promise<number> {
    return this.prisma.aiTask.count(args);
  }

  async aiTasks(args: Prisma.AiTaskFindManyArgs): Promise<PrismaAiTask[]> {
    return this.prisma.aiTask.findMany(args);
  }
  async aiTask(
    args: Prisma.AiTaskFindUniqueArgs
  ): Promise<PrismaAiTask | null> {
    return this.prisma.aiTask.findUnique(args);
  }
  async createAiTask(args: Prisma.AiTaskCreateArgs): Promise<PrismaAiTask> {
    return this.prisma.aiTask.create(args);
  }
  async updateAiTask(args: Prisma.AiTaskUpdateArgs): Promise<PrismaAiTask> {
    return this.prisma.aiTask.update(args);
  }
  async deleteAiTask(args: Prisma.AiTaskDeleteArgs): Promise<PrismaAiTask> {
    return this.prisma.aiTask.delete(args);
  }

  async getAiAgent(parentId: string): Promise<PrismaAiAgent | null> {
    return this.prisma.aiTask
      .findUnique({
        where: { id: parentId },
      })
      .aiAgent();
  }

  async getJournalEntry(parentId: string): Promise<PrismaJournalEntry | null> {
    return this.prisma.aiTask
      .findUnique({
        where: { id: parentId },
      })
      .journalEntry();
  }
}
