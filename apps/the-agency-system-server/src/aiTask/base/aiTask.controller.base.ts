/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiTaskService } from "../aiTask.service";
import { AiTaskCreateInput } from "./AiTaskCreateInput";
import { AiTask } from "./AiTask";
import { AiTaskFindManyArgs } from "./AiTaskFindManyArgs";
import { AiTaskWhereUniqueInput } from "./AiTaskWhereUniqueInput";
import { AiTaskUpdateInput } from "./AiTaskUpdateInput";

export class AiTaskControllerBase {
  constructor(protected readonly service: AiTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiTask })
  async createAiTask(@common.Body() data: AiTaskCreateInput): Promise<AiTask> {
    return await this.service.createAiTask({
      data: {
        ...data,

        aiAgent: data.aiAgent
          ? {
              connect: data.aiAgent,
            }
          : undefined,

        journalEntry: data.journalEntry
          ? {
              connect: data.journalEntry,
            }
          : undefined,
      },
      select: {
        aiAgent: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        journalEntry: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiTask] })
  @ApiNestedQuery(AiTaskFindManyArgs)
  async aiTasks(@common.Req() request: Request): Promise<AiTask[]> {
    const args = plainToClass(AiTaskFindManyArgs, request.query);
    return this.service.aiTasks({
      ...args,
      select: {
        aiAgent: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        journalEntry: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiTask(
    @common.Param() params: AiTaskWhereUniqueInput
  ): Promise<AiTask | null> {
    const result = await this.service.aiTask({
      where: params,
      select: {
        aiAgent: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        journalEntry: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiTask(
    @common.Param() params: AiTaskWhereUniqueInput,
    @common.Body() data: AiTaskUpdateInput
  ): Promise<AiTask | null> {
    try {
      return await this.service.updateAiTask({
        where: params,
        data: {
          ...data,

          aiAgent: data.aiAgent
            ? {
                connect: data.aiAgent,
              }
            : undefined,

          journalEntry: data.journalEntry
            ? {
                connect: data.journalEntry,
              }
            : undefined,
        },
        select: {
          aiAgent: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,

          journalEntry: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiTask(
    @common.Param() params: AiTaskWhereUniqueInput
  ): Promise<AiTask | null> {
    try {
      return await this.service.deleteAiTask({
        where: params,
        select: {
          aiAgent: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,

          journalEntry: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
