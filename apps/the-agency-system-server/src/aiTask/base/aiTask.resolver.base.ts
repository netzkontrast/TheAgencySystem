/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiTask } from "./AiTask";
import { AiTaskCountArgs } from "./AiTaskCountArgs";
import { AiTaskFindManyArgs } from "./AiTaskFindManyArgs";
import { AiTaskFindUniqueArgs } from "./AiTaskFindUniqueArgs";
import { CreateAiTaskArgs } from "./CreateAiTaskArgs";
import { UpdateAiTaskArgs } from "./UpdateAiTaskArgs";
import { DeleteAiTaskArgs } from "./DeleteAiTaskArgs";
import { AiAgent } from "../../aiAgent/base/AiAgent";
import { JournalEntry } from "../../journalEntry/base/JournalEntry";
import { AiTaskService } from "../aiTask.service";
@graphql.Resolver(() => AiTask)
export class AiTaskResolverBase {
  constructor(protected readonly service: AiTaskService) {}

  async _aiTasksMeta(
    @graphql.Args() args: AiTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiTask])
  async aiTasks(@graphql.Args() args: AiTaskFindManyArgs): Promise<AiTask[]> {
    return this.service.aiTasks(args);
  }

  @graphql.Query(() => AiTask, { nullable: true })
  async aiTask(
    @graphql.Args() args: AiTaskFindUniqueArgs
  ): Promise<AiTask | null> {
    const result = await this.service.aiTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiTask)
  async createAiTask(@graphql.Args() args: CreateAiTaskArgs): Promise<AiTask> {
    return await this.service.createAiTask({
      ...args,
      data: {
        ...args.data,

        aiAgent: args.data.aiAgent
          ? {
              connect: args.data.aiAgent,
            }
          : undefined,

        journalEntry: args.data.journalEntry
          ? {
              connect: args.data.journalEntry,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AiTask)
  async updateAiTask(
    @graphql.Args() args: UpdateAiTaskArgs
  ): Promise<AiTask | null> {
    try {
      return await this.service.updateAiTask({
        ...args,
        data: {
          ...args.data,

          aiAgent: args.data.aiAgent
            ? {
                connect: args.data.aiAgent,
              }
            : undefined,

          journalEntry: args.data.journalEntry
            ? {
                connect: args.data.journalEntry,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiTask)
  async deleteAiTask(
    @graphql.Args() args: DeleteAiTaskArgs
  ): Promise<AiTask | null> {
    try {
      return await this.service.deleteAiTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AiAgent, {
    nullable: true,
    name: "aiAgent",
  })
  async getAiAgent(@graphql.Parent() parent: AiTask): Promise<AiAgent | null> {
    const result = await this.service.getAiAgent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JournalEntry, {
    nullable: true,
    name: "journalEntry",
  })
  async getJournalEntry(
    @graphql.Parent() parent: AiTask
  ): Promise<JournalEntry | null> {
    const result = await this.service.getJournalEntry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
